{"version":3,"sources":["contracts/dao_approval.teal","contracts/dao_clear.teal","contracts/proposal_approval.teal","contracts/proposal_clear.teal","utils/conversions.js","components/utils/Notifications.js","components/utils/Loader.js","components/dao/Form.jsx","components/dao/CreateDao.jsx","components/dao/Header.jsx","components/dao/Contribute.jsx","components/dao/Redeem.jsx","components/dao/Transfer.jsx","components/dao/CreateProposal.jsx","components/dao/Proposals.jsx","components/dao/Dao.jsx","components/utils/Cover.js","assets/img/DAO.jpg","App.js","reportWebVitals.js","index.js","utils/constants.js","utils/dao.js","utils/proposal.js"],"names":["base64ToUTF8String","base64String","Buffer","from","toString","utf8ToBase64String","utf8String","truncateAddress","address","slice","length","microAlgosToString","num","algosdk","microalgosToAlgos","stringToMicroAlgos","str","algosToMicroalgos","Number","convertTime","secs","dateObj","Date","toLocaleDateString","weekday","year","month","day","toLocaleString","hour","minute","hour12","getAddress","addr","encodeAddress","Base64","toUint8Array","Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","className","NotificationError","DefaultProps","defaultProps","Loader","Backdrop","sx","color","zIndex","theme","drawer","open","CircularProgress","Input","name","type","value","onChange","placeholder","id","required","htmlFor","style","top","left","transform","display","flexDirection","alignItems","justifyContent","bgcolor","border","boxShadow","p","CreateDao","createDao","React","quorum","setQuorum","voteTimeLimit","setVoteTime","startTxn","a","voteTime","setOpen","Button","onClick","Modal","onClose","aria-labelledby","aria-describedby","Tooltip","title","arrow","Info","cursor","e","target","variant","Header","balance","daoData","disconnect","useState","Box","Typography","opacity","daoAppId","align","fontSize","href","rel","Grid","container","spacing","width","marginY","item","xs","userShares","mr","Drawer","anchor","padding","startIcon","Logout","Contribute","contributeToDAO","inputValue","setInputValue","amount","Redeem","redeemShares","Transfer","transferShares","amountTo","setAmount","sendTo","setSendTo","Proposal","createProposal","setName","recipient","setRecipient","Proposals","proposals","lockInProposal","voteProposal","executeProposal","dao","proposalLockedIn","proposal","isLocked","proposalEnded","ended","proposalSuccessfull","success","userOptedIn","userId","isFinished","now","getTime","parseInt","ends","hasVoted","userVoteStatus","startLockInTxn","startVoteTxn","startExecTxn","TableContainer","component","Paper","background","marginBottom","Table","minWidth","size","aria-label","TableHead","TableRow","TableCell","TableBody","map","scope","appId","votes","creatorAddress","disabled","Dao","setBalance","setDaoData","setProposals","loading","setLoading","getDaoData","useCallback","getDaoDataAction","then","catch","error","console","log","getProposals","getProposalsAction","finally","_","fetchBalance","indexerClient","lookupAccountByID","do","response","_balance","account","data","createDaoAction","toast","contributeToDaoAction","redeemSharesAction","transferSharesAction","createProposalAction","lockInProposalAction","voteAction","executeProposalAction","createTheme","palette","primary","light","main","dark","contrastText","useEffect","ThemeProvider","Cover","login","coverImg","minHeight","src","alt","margin","AccountBalanceWallet","App","setAddress","connectWallet","myAlgoConnect","connect","accounts","_account","Container","fluid","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","config","algodClient","Algodv2","Indexer","MyAlgoConnect","minRound","daoNote","proposalNote","numLocalIntsDao","numLocalBytesDao","numGlobalIntsDao","numGlobalBytesDao","numLocalIntsProposal","numLocalBytesProposal","numGlobalIntsProposal","numGlobalBytesProposal","DAO","appAddress","totalShares","this","compileProgram","programSource","encoder","TextEncoder","programBytes","encode","algo","compile","compileResponse","Uint8Array","result","senderAddress","getTransactionParams","params","ApprovalProgram","compiledApprovalProgram","ClearProgram","compiledClearProgram","encodeUint64","note","appArgs","txn","makeApplicationCreateTxnFromObject","suggestedParams","onComplete","OnApplicationComplete","NoOpOC","approvalProgram","clearProgram","numLocalInts","numLocalByteSlices","numGlobalInts","numGlobalByteSlices","txId","txID","signTransaction","toByte","signedTxn","sendRawTransaction","blob","waitForConfirmation","confirmedTxn","pendingTransactionInformation","transactionResponse","optInTxn","makeApplicationOptInTxnFromObject","appIndex","contributeArg","amountArg","appCallTxn","makeApplicationCallTxnFromObject","paymentTxn","makePaymentTxnWithSuggestedParamsFromObject","to","txnArray","groupID","computeGroupID","i","group","tx","fee","ALGORAND_MIN_TX_FEE","flatFee","redeemArg","isValidAddress","Error","transferArg","getApplication","dao_","lookupApplications","includeAll","application","deleted","globalState","getApplicationAddress","creator","undefined","getField","fieldName","find","state","key","uint","lookupAccountAppLocalStates","userInfo","appLocalState","localState","executed","foreignApps","lockArg","foreignApps1","appCallTxn1","foreignApps2","appCallTxn2","executeArg","appArgs1","fundArg","appArgs2","endArg","appArgs3","appCallTxn3","encodedNote","searchForTransactions","notePrefix","txType","transactionInfo","transactions","transaction","push","field","bytes"],"mappings":"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","file":"static/js/main.bb78a7f8.chunk.js","sourcesContent":["export default \"#pragma version 6\\ntxn ApplicationID\\nint 0\\n==\\nbnz main_l23\\ntxn OnCompletion\\nint DeleteApplication\\n==\\nbnz main_l22\\ntxn OnCompletion\\nint OptIn\\n==\\nbnz main_l21\\ntxna ApplicationArgs 0\\nbyte \\\"contribute\\\"\\n==\\nbnz main_l15\\ntxna ApplicationArgs 0\\nbyte \\\"transfer\\\"\\n==\\nbnz main_l14\\ntxna ApplicationArgs 0\\nbyte \\\"redeem\\\"\\n==\\nbnz main_l13\\ntxna ApplicationArgs 0\\nbyte \\\"lock\\\"\\n==\\nbnz main_l12\\ntxna ApplicationArgs 0\\nbyte \\\"fund\\\"\\n==\\nbnz main_l9\\nerr\\nmain_l9:\\nglobal GroupSize\\nint 3\\n==\\ntxn GroupIndex\\nint 1\\n==\\n&&\\ntxn NumAccounts\\nint 1\\n==\\n&&\\ntxn NumApplications\\nint 1\\n==\\n&&\\ngtxn 0 TypeEnum\\nint appl\\n==\\n&&\\ngtxn 0 ApplicationID\\ntxna Applications 1\\n==\\n&&\\ngtxn 0 OnCompletion\\nint NoOp\\n==\\n&&\\ngtxn 0 NumAppArgs\\nint 1\\n==\\n&&\\ngtxna 0 ApplicationArgs 0\\nbyte \\\"execute\\\"\\n==\\n&&\\ngtxn 2 TypeEnum\\nint appl\\n==\\n&&\\ngtxn 2 ApplicationID\\ntxna Applications 1\\n==\\n&&\\ngtxn 2 OnCompletion\\nint NoOp\\n==\\n&&\\ngtxn 2 NumAppArgs\\nint 1\\n==\\n&&\\ngtxna 2 ApplicationArgs 0\\nbyte \\\"end\\\"\\n==\\n&&\\nassert\\ntxna Applications 1\\nbyte \\\"DAO\\\"\\ncallsub readAppState_1\\nstore 12\\ntxna Applications 1\\nbyte \\\"AMOUNT\\\"\\ncallsub readAppState_1\\nstore 8\\ntxna Applications 1\\nbyte \\\"SUCCESS\\\"\\ncallsub readAppState_1\\nstore 9\\ntxna Applications 1\\nbyte \\\"EXECUTED\\\"\\ncallsub readAppState_1\\nstore 11\\ntxna Applications 1\\nbyte \\\"ENDED\\\"\\ncallsub readAppState_1\\nstore 10\\ntxna Applications 1\\nbyte \\\"ISLOCKED\\\"\\ncallsub readAppState_1\\nstore 13\\ntxna Applications 1\\ncallsub getProposalRecipient_2\\nstore 14\\nload 12\\nglobal CurrentApplicationID\\n==\\nload 11\\nint 1\\n==\\n&&\\nload 10\\nint 0\\n==\\n&&\\nload 8\\nint 0\\n>\\n&&\\nload 8\\nbyte \\\"LOCKED\\\"\\napp_global_get\\n<=\\n&&\\nload 8\\nbyte \\\"AVAILABLE\\\"\\napp_global_get\\n<=\\n&&\\nload 14\\ntxna Accounts 1\\n==\\n&&\\nload 13\\nint 1\\n==\\n&&\\nassert\\nload 9\\nint 1\\n==\\nbnz main_l11\\nmain_l10:\\nbyte \\\"LOCKED\\\"\\nbyte \\\"LOCKED\\\"\\napp_global_get\\nload 8\\n-\\napp_global_put\\nint 1\\nreturn\\nmain_l11:\\ntxn Fee\\nglobal MinTxnFee\\nint 3\\n*\\n>=\\nassert\\ntxna Accounts 1\\nload 8\\ncallsub sendfunds_0\\nbyte \\\"AVAILABLE\\\"\\nbyte \\\"AVAILABLE\\\"\\napp_global_get\\nload 8\\n-\\napp_global_put\\nb main_l10\\nmain_l12:\\ntxna Accounts 0\\ntxna Applications 0\\napp_opted_in\\nglobal GroupSize\\nint 2\\n==\\n&&\\ntxn GroupIndex\\nint 1\\n==\\n&&\\ngtxn 0 TypeEnum\\nint appl\\n==\\n&&\\ngtxna 0 ApplicationArgs 0\\nbyte \\\"lock\\\"\\n==\\n&&\\ntxn NumAppArgs\\nint 1\\n==\\n&&\\ntxn NumApplications\\nint 1\\n==\\n&&\\nassert\\ntxna Applications 1\\nbyte \\\"AMOUNT\\\"\\ncallsub readAppState_1\\nstore 7\\nload 7\\nint 0\\n>\\nload 7\\nbyte \\\"AVAILABLE\\\"\\napp_global_get\\nbyte \\\"LOCKED\\\"\\napp_global_get\\n-\\n<=\\n&&\\nassert\\nbyte \\\"LOCKED\\\"\\nbyte \\\"LOCKED\\\"\\napp_global_get\\nload 7\\n+\\napp_global_put\\nint 1\\nreturn\\nmain_l13:\\ntxna Accounts 0\\ntxna Applications 0\\napp_opted_in\\ntxn NumAppArgs\\nint 2\\n==\\n&&\\ntxna ApplicationArgs 1\\nbtoi\\ntxna Accounts 0\\nbyte \\\"USHARES\\\"\\napp_local_get\\n<=\\n&&\\ntxna ApplicationArgs 1\\nbtoi\\nbyte \\\"AVAILABLE\\\"\\napp_global_get\\nbyte \\\"LOCKED\\\"\\napp_global_get\\n-\\n<=\\n&&\\ntxna ApplicationArgs 1\\nbtoi\\nint 0\\n>\\n&&\\ntxn Fee\\nglobal MinTxnFee\\nint 2\\n*\\n>=\\n&&\\nassert\\ntxna Accounts 0\\ntxna ApplicationArgs 1\\nbtoi\\ncallsub sendfunds_0\\ntxna Accounts 0\\nbyte \\\"USHARES\\\"\\ntxna Accounts 0\\nbyte \\\"USHARES\\\"\\napp_local_get\\ntxna ApplicationArgs 1\\nbtoi\\n-\\napp_local_put\\nbyte \\\"SHARES\\\"\\nbyte \\\"SHARES\\\"\\napp_global_get\\ntxna ApplicationArgs 1\\nbtoi\\n-\\napp_global_put\\nbyte \\\"AVAILABLE\\\"\\nbyte \\\"AVAILABLE\\\"\\napp_global_get\\ntxna ApplicationArgs 1\\nbtoi\\n-\\napp_global_put\\nint 1\\nreturn\\nmain_l14:\\ntxn NumAccounts\\nint 1\\n==\\ntxna Accounts 0\\ntxna Applications 0\\napp_opted_in\\n&&\\ntxna Accounts 1\\ntxna Applications 0\\napp_opted_in\\n&&\\ntxn NumAppArgs\\nint 2\\n==\\n&&\\ntxna ApplicationArgs 1\\nbtoi\\ntxna Accounts 0\\nbyte \\\"USHARES\\\"\\napp_local_get\\n<=\\n&&\\ntxna ApplicationArgs 1\\nbtoi\\nint 0\\n>\\n&&\\nassert\\ntxna Accounts 0\\nbyte \\\"USHARES\\\"\\ntxna Accounts 0\\nbyte \\\"USHARES\\\"\\napp_local_get\\ntxna ApplicationArgs 1\\nbtoi\\n-\\napp_local_put\\ntxna Accounts 1\\nbyte \\\"USHARES\\\"\\ntxna Accounts 1\\nbyte \\\"USHARES\\\"\\napp_local_get\\ntxna ApplicationArgs 1\\nbtoi\\n+\\napp_local_put\\nint 1\\nreturn\\nmain_l15:\\nglobal GroupSize\\nint 3\\n==\\nbnz main_l20\\nglobal GroupSize\\nint 2\\n==\\nbnz main_l18\\nerr\\nmain_l18:\\ntxna Accounts 0\\ntxna Applications 0\\napp_opted_in\\ntxn GroupIndex\\nint 0\\n==\\n&&\\ntxn NumAppArgs\\nint 2\\n==\\n&&\\ntxna ApplicationArgs 1\\nbtoi\\nint 1000000\\n>=\\n&&\\ngtxn 1 TypeEnum\\nint pay\\n==\\n&&\\ngtxn 1 Receiver\\nglobal CurrentApplicationAddress\\n==\\n&&\\ngtxn 1 CloseRemainderTo\\nglobal ZeroAddress\\n==\\n&&\\ngtxn 1 Amount\\ntxna ApplicationArgs 1\\nbtoi\\n==\\n&&\\ngtxn 1 Sender\\ngtxn 0 Sender\\n==\\n&&\\nassert\\ntxna Accounts 0\\nbyte \\\"USHARES\\\"\\napp_local_get\\nstore 4\\ntxna Accounts 0\\nbyte \\\"USHARES\\\"\\nload 4\\ntxna ApplicationArgs 1\\nbtoi\\n+\\napp_local_put\\nbyte \\\"AVAILABLE\\\"\\napp_global_get\\nstore 6\\nbyte \\\"SHARES\\\"\\napp_global_get\\nstore 5\\nbyte \\\"SHARES\\\"\\nload 5\\ntxna ApplicationArgs 1\\nbtoi\\n+\\napp_global_put\\nbyte \\\"AVAILABLE\\\"\\nload 6\\ntxna ApplicationArgs 1\\nbtoi\\n+\\napp_global_put\\nint 1\\nreturn\\nint 1\\nreturn\\nmain_l20:\\ntxn GroupIndex\\nint 1\\n==\\ngtxn 0 TypeEnum\\nint appl\\n==\\n&&\\ngtxn 0 OnCompletion\\nint OptIn\\n==\\n&&\\ntxn NumAppArgs\\nint 2\\n==\\n&&\\ntxna ApplicationArgs 1\\nbtoi\\nint 1000000\\n>=\\n&&\\ngtxn 2 TypeEnum\\nint pay\\n==\\n&&\\ngtxn 2 Receiver\\nglobal CurrentApplicationAddress\\n==\\n&&\\ngtxn 2 Amount\\ngtxna 1 ApplicationArgs 1\\nbtoi\\n==\\n&&\\nassert\\ntxna Accounts 0\\nbyte \\\"USHARES\\\"\\napp_local_get\\nstore 1\\ntxna Accounts 0\\nbyte \\\"USHARES\\\"\\nload 1\\ntxna ApplicationArgs 1\\nbtoi\\n+\\napp_local_put\\nbyte \\\"AVAILABLE\\\"\\napp_global_get\\nstore 3\\nbyte \\\"SHARES\\\"\\napp_global_get\\nstore 2\\nbyte \\\"SHARES\\\"\\nload 2\\ntxna ApplicationArgs 1\\nbtoi\\n+\\napp_global_put\\nbyte \\\"AVAILABLE\\\"\\nload 3\\ntxna ApplicationArgs 1\\nbtoi\\n+\\napp_global_put\\nint 1\\nreturn\\nmain_l21:\\nglobal GroupSize\\nint 3\\n==\\nassert\\ntxn GroupIndex\\nint 0\\n==\\nassert\\ngtxn 1 TypeEnum\\nint appl\\n==\\nassert\\ngtxn 1 ApplicationID\\nglobal CurrentApplicationID\\n==\\nassert\\ngtxna 1 ApplicationArgs 0\\nbyte \\\"contribute\\\"\\n==\\nassert\\ngtxn 1 OnCompletion\\nint NoOp\\n==\\nassert\\ngtxn 1 Sender\\ngtxn 0 Sender\\n==\\nassert\\ngtxn 2 TypeEnum\\nint pay\\n==\\nassert\\ngtxn 2 Receiver\\nglobal CurrentApplicationAddress\\n==\\nassert\\ngtxn 2 CloseRemainderTo\\nglobal ZeroAddress\\n==\\nassert\\ngtxn 2 Amount\\nint 1000000\\n>=\\nassert\\ngtxn 2 Sender\\ngtxn 0 Sender\\n==\\nassert\\nbyte \\\"INVESTORS\\\"\\napp_global_get\\nstore 0\\nbyte \\\"INVESTORS\\\"\\nload 0\\nint 1\\n+\\napp_global_put\\ntxna Accounts 0\\nbyte \\\"USERID\\\"\\nload 0\\nint 1\\n+\\napp_local_put\\ntxna Accounts 0\\nbyte \\\"USHARES\\\"\\nint 0\\napp_local_put\\nint 1\\nreturn\\nmain_l22:\\ntxn Sender\\nglobal CreatorAddress\\n==\\nreturn\\nmain_l23:\\ntxn Note\\nbyte \\\"algodao:uv01\\\"\\n==\\ntxn NumAppArgs\\nint 2\\n==\\n&&\\ntxna ApplicationArgs 0\\nbtoi\\nint 0\\n>\\ntxna ApplicationArgs 0\\nbtoi\\nint 100\\n<\\n&&\\n&&\\ntxna ApplicationArgs 1\\nbtoi\\nint 0\\n>\\n&&\\nassert\\nbyte \\\"QUORUM\\\"\\ntxna ApplicationArgs 0\\nbtoi\\napp_global_put\\nbyte \\\"TIME\\\"\\ntxna ApplicationArgs 1\\nbtoi\\napp_global_put\\nbyte \\\"SHARES\\\"\\nint 0\\napp_global_put\\nbyte \\\"AVAILABLE\\\"\\nint 0\\napp_global_put\\nbyte \\\"LOCKED\\\"\\nint 0\\napp_global_put\\nbyte \\\"INVESTORS\\\"\\nint 0\\napp_global_put\\nint 1\\nreturn\\n\\n// send_funds\\nsendfunds_0:\\nstore 16\\nstore 15\\nitxn_begin\\nint pay\\nitxn_field TypeEnum\\nload 15\\nitxn_field Receiver\\nload 16\\nitxn_field Amount\\nint 0\\nitxn_field Fee\\nitxn_submit\\nretsub\\n\\n// readAppState\\nreadAppState_1:\\nstore 18\\nstore 17\\nload 17\\nload 18\\napp_global_get_ex\\nstore 20\\nstore 19\\nload 20\\nbnz readAppState_1_l2\\nint 0\\nstore 21\\nb readAppState_1_l3\\nreadAppState_1_l2:\\nload 19\\nstore 21\\nreadAppState_1_l3:\\nload 21\\nretsub\\n\\n// getProposalRecipient\\ngetProposalRecipient_2:\\nstore 22\\nload 22\\nbyte \\\"RECIPIENT\\\"\\napp_global_get_ex\\nstore 24\\nstore 23\\nload 24\\nbnz getProposalRecipient_2_l2\\nbyte \\\"0\\\"\\nstore 25\\nb getProposalRecipient_2_l3\\ngetProposalRecipient_2_l2:\\nload 23\\nstore 25\\ngetProposalRecipient_2_l3:\\nload 25\\nretsub\";","export default \"#pragma version 6\\nint 1\\nreturn\";","export default \"#pragma version 6\\ntxn ApplicationID\\nint 0\\n==\\nbnz main_l14\\ntxn OnCompletion\\nint OptIn\\n==\\nbnz main_l13\\ntxn OnCompletion\\nint DeleteApplication\\n==\\nbnz main_l12\\ntxna ApplicationArgs 0\\nbyte \\\"lock\\\"\\n==\\nbnz main_l11\\ntxna ApplicationArgs 0\\nbyte \\\"execute\\\"\\n==\\nbnz main_l8\\ntxna ApplicationArgs 0\\nbyte \\\"end\\\"\\n==\\nbnz main_l7\\nerr\\nmain_l7:\\nglobal GroupSize\\nint 3\\n==\\ntxn GroupIndex\\nint 2\\n==\\n&&\\ngtxn 0 TypeEnum\\nint appl\\n==\\n&&\\ngtxn 0 ApplicationID\\nglobal CurrentApplicationID\\n==\\n&&\\ngtxn 0 OnCompletion\\nint NoOp\\n==\\n&&\\ngtxn 0 NumAppArgs\\nint 1\\n==\\n&&\\ngtxna 0 ApplicationArgs 0\\nbyte \\\"execute\\\"\\n==\\n&&\\ngtxn 1 TypeEnum\\nint appl\\n==\\n&&\\ngtxn 1 ApplicationID\\nbyte \\\"DAO\\\"\\napp_global_get\\n==\\n&&\\ngtxn 1 OnCompletion\\nint NoOp\\n==\\n&&\\ngtxn 1 NumAppArgs\\nint 1\\n==\\n&&\\ngtxna 1 ApplicationArgs 0\\nbyte \\\"fund\\\"\\n==\\n&&\\nbyte \\\"ISLOCKED\\\"\\napp_global_get\\nint 1\\n==\\n&&\\nglobal LatestTimestamp\\nbyte \\\"ENDS\\\"\\napp_global_get\\n>=\\n&&\\nbyte \\\"ENDED\\\"\\napp_global_get\\nint 0\\n==\\n&&\\nbyte \\\"EXECUTED\\\"\\napp_global_get\\nint 1\\n==\\n&&\\nassert\\nbyte \\\"ENDED\\\"\\nint 1\\napp_global_put\\nint 1\\nreturn\\nmain_l8:\\ntxna Accounts 0\\ntxna Applications 0\\napp_opted_in\\nglobal GroupSize\\nint 3\\n==\\n&&\\ntxn GroupIndex\\nint 0\\n==\\n&&\\ntxn NumApplications\\nint 1\\n==\\n&&\\ntxna Applications 1\\nbyte \\\"DAO\\\"\\napp_global_get\\n==\\n&&\\ntxna Accounts 0\\ntxna Applications 1\\napp_opted_in\\n&&\\ntxn NumAppArgs\\nint 1\\n==\\n&&\\nbyte \\\"ISLOCKED\\\"\\napp_global_get\\nint 1\\n==\\n&&\\nglobal LatestTimestamp\\nbyte \\\"ENDS\\\"\\napp_global_get\\n>=\\n&&\\nbyte \\\"ENDED\\\"\\napp_global_get\\nint 0\\n==\\n&&\\nbyte \\\"EXECUTED\\\"\\napp_global_get\\nint 0\\n==\\n&&\\ngtxn 1 TypeEnum\\nint appl\\n==\\n&&\\ngtxn 1 ApplicationID\\nbyte \\\"DAO\\\"\\napp_global_get\\n==\\n&&\\ngtxn 1 OnCompletion\\nint NoOp\\n==\\n&&\\ngtxn 1 NumAppArgs\\nint 1\\n==\\n&&\\ngtxna 1 ApplicationArgs 0\\nbyte \\\"fund\\\"\\n==\\n&&\\ngtxn 1 NumApplications\\nint 1\\n==\\n&&\\ngtxna 1 Applications 1\\nglobal CurrentApplicationID\\n==\\n&&\\ngtxn 1 NumAccounts\\nint 1\\n==\\n&&\\ngtxna 1 Accounts 1\\nbyte \\\"RECIPIENT\\\"\\napp_global_get\\n==\\n&&\\ngtxn 1 Sender\\ngtxn 0 Sender\\n==\\n&&\\ngtxn 2 TypeEnum\\nint appl\\n==\\n&&\\ngtxn 2 ApplicationID\\nglobal CurrentApplicationID\\n==\\n&&\\ngtxn 2 OnCompletion\\nint NoOp\\n==\\n&&\\ngtxn 2 NumAppArgs\\nint 1\\n==\\n&&\\ngtxna 2 ApplicationArgs 0\\nbyte \\\"end\\\"\\n==\\n&&\\ngtxn 2 Sender\\ngtxn 0 Sender\\n==\\n&&\\nassert\\ntxna Applications 1\\nbyte \\\"SHARES\\\"\\ncallsub readAppState_0\\nstore 5\\ntxna Applications 1\\nbyte \\\"QUORUM\\\"\\ncallsub readAppState_0\\nstore 6\\nload 5\\nint 0\\n>\\nload 6\\nint 0\\n>\\n&&\\nassert\\nbyte \\\"VOTES\\\"\\napp_global_get\\nload 5\\n/\\nint 100\\n*\\nload 6\\n>=\\nbnz main_l10\\nmain_l9:\\nbyte \\\"EXECUTED\\\"\\nint 1\\napp_global_put\\nint 1\\nreturn\\nmain_l10:\\nbyte \\\"SUCCESS\\\"\\nint 1\\napp_global_put\\nb main_l9\\nmain_l11:\\nglobal GroupSize\\nint 2\\n==\\ntxn GroupIndex\\nint 0\\n==\\n&&\\ntxn NumApplications\\nint 1\\n==\\n&&\\ntxna Applications 1\\nbyte \\\"DAO\\\"\\napp_global_get\\n==\\n&&\\ntxna Accounts 0\\ntxna Applications 1\\napp_opted_in\\n&&\\ngtxn 0 Sender\\nglobal CreatorAddress\\n==\\n&&\\nbyte \\\"ISLOCKED\\\"\\napp_global_get\\nint 0\\n==\\n&&\\ngtxn 1 TypeEnum\\nint appl\\n==\\n&&\\ngtxn 1 ApplicationID\\nbyte \\\"DAO\\\"\\napp_global_get\\n==\\n&&\\ngtxn 1 OnCompletion\\nint NoOp\\n==\\n&&\\ngtxn 1 NumApplications\\nint 1\\n==\\n&&\\ngtxna 1 Applications 1\\nglobal CurrentApplicationID\\n==\\n&&\\ngtxn 1 NumAppArgs\\nint 1\\n==\\n&&\\ngtxna 1 ApplicationArgs 0\\nbyte \\\"lock\\\"\\n==\\n&&\\ngtxn 1 Sender\\ngtxn 0 Sender\\n==\\n&&\\nassert\\ntxna Applications 1\\nbyte \\\"TIME\\\"\\ncallsub readAppState_0\\nstore 4\\nload 4\\nint 0\\n>\\nassert\\nbyte \\\"ISLOCKED\\\"\\nint 1\\napp_global_put\\nbyte \\\"ENDS\\\"\\nglobal LatestTimestamp\\nload 4\\n+\\napp_global_put\\nint 1\\nreturn\\nmain_l12:\\ntxn Sender\\nglobal CreatorAddress\\n==\\nbyte \\\"ENDED\\\"\\napp_global_get\\nint 1\\n==\\n&&\\nreturn\\nmain_l13:\\ntxn NumApplications\\nint 1\\n==\\ntxna Applications 1\\nbyte \\\"DAO\\\"\\napp_global_get\\n==\\n&&\\ntxna Accounts 0\\ntxna Applications 1\\napp_opted_in\\n&&\\ntxna Accounts 0\\nbyte \\\"VOTESTATUS\\\"\\napp_local_get\\nint 0\\n==\\n&&\\nbyte \\\"ISLOCKED\\\"\\napp_global_get\\nint 1\\n==\\n&&\\nglobal LatestTimestamp\\nbyte \\\"ENDS\\\"\\napp_global_get\\n<=\\n&&\\nassert\\ntxna Accounts 0\\ntxna Applications 1\\ncallsub getUserShares_1\\nstore 3\\nload 3\\nint 0\\n>\\nassert\\nbyte \\\"VOTES\\\"\\napp_global_get\\nstore 2\\nbyte \\\"VOTES\\\"\\nload 2\\nload 3\\n+\\napp_global_put\\ntxna Accounts 0\\nbyte \\\"VOTESTATUS\\\"\\nint 1\\napp_local_put\\nint 1\\nreturn\\nmain_l14:\\ntxn Note\\nbyte \\\"algodaoproposal:uv02\\\"\\n==\\ntxn NumApplications\\nint 1\\n==\\n&&\\ntxna Accounts 0\\ntxna Applications 1\\napp_opted_in\\n&&\\ntxna Applications 1\\nint 114731548\\n==\\n&&\\ntxn NumAppArgs\\nint 2\\n==\\n&&\\ntxn NumAccounts\\nint 1\\n==\\n&&\\ntxna ApplicationArgs 1\\nbtoi\\nint 1000000\\n>=\\n&&\\nassert\\ntxna Applications 1\\nbyte \\\"LOCKED\\\"\\ncallsub readAppState_0\\nstore 0\\ntxna Applications 1\\nbyte \\\"AVAILABLE\\\"\\ncallsub readAppState_0\\nstore 1\\nload 0\\nint 0\\n>=\\nload 1\\nint 0\\n>\\n&&\\ntxna ApplicationArgs 1\\nbtoi\\nload 1\\nload 0\\n-\\n<=\\n&&\\nassert\\nbyte \\\"DAO\\\"\\ntxna Applications 1\\napp_global_put\\nbyte \\\"NAME\\\"\\ntxna ApplicationArgs 0\\napp_global_put\\nbyte \\\"RECIPIENT\\\"\\ntxna Accounts 1\\napp_global_put\\nbyte \\\"AMOUNT\\\"\\ntxna ApplicationArgs 1\\nbtoi\\napp_global_put\\nbyte \\\"ENDS\\\"\\nint 0\\napp_global_put\\nbyte \\\"VOTES\\\"\\nint 0\\napp_global_put\\nbyte \\\"ISLOCKED\\\"\\nint 0\\napp_global_put\\nbyte \\\"EXECUTED\\\"\\nint 0\\napp_global_put\\nbyte \\\"SUCCESS\\\"\\nint 0\\napp_global_put\\nbyte \\\"ENDED\\\"\\nint 0\\napp_global_put\\nint 1\\nreturn\\n\\n// readAppState\\nreadAppState_0:\\nstore 8\\nstore 7\\nload 7\\nload 8\\napp_global_get_ex\\nstore 10\\nstore 9\\nload 10\\nbnz readAppState_0_l2\\nint 0\\nstore 11\\nb readAppState_0_l3\\nreadAppState_0_l2:\\nload 9\\nstore 11\\nreadAppState_0_l3:\\nload 11\\nretsub\\n\\n// getUserShares\\ngetUserShares_1:\\nstore 13\\nstore 12\\nload 12\\nload 13\\nbyte \\\"USHARES\\\"\\napp_local_get_ex\\nstore 15\\nstore 14\\nload 15\\nbnz getUserShares_1_l2\\nint 0\\nstore 16\\nb getUserShares_1_l3\\ngetUserShares_1_l2:\\nload 14\\nstore 16\\ngetUserShares_1_l3:\\nload 16\\nretsub\";","export default \"#pragma version 6\\nint 1\\nreturn\";","import algosdk from \"algosdk\";\nimport { Base64 } from \"js-base64\";\n\nexport const base64ToUTF8String = (base64String) => {\n  return Buffer.from(base64String, \"base64\").toString(\"utf-8\");\n};\n\nexport const utf8ToBase64String = (utf8String) => {\n  return Buffer.from(utf8String, \"utf8\").toString(\"base64\");\n};\n\n// Truncate is done in the middle to allow for checking of first and last chars simply to ensure correct address\nexport const truncateAddress = (address) => {\n  if (!address) return;\n  return (\n    address.slice(0, 5) +\n    \"...\" +\n    address.slice(address.length - 5, address.length)\n  );\n};\n\n// Amounts in microAlgos (e.g. 10500) are shown as algos (e.g. 10.5) in the frontend\nexport const microAlgosToString = (num) => {\n  if (!num) return;\n  return algosdk.microalgosToAlgos(num);\n};\n\n// Convert an amount entered as algos (e.g. 10.5) to microAlgos (e.g. 10500)\nexport const stringToMicroAlgos = (str) => {\n  if (!str) return;\n\n  return algosdk.algosToMicroalgos(Number(str));\n};\n\nexport const convertTime = (secs) => {\n  if (secs === 0) {\n    return \"--\";\n  }\n\n  let dateObj = new Date(secs * 1000);\n\n  let date = dateObj.toLocaleDateString(\"en-us\", {\n    weekday: \"short\",\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\",\n  });\n  let time = dateObj.toLocaleString(\"en-us\", {\n    hour: \"numeric\",\n    minute: \"numeric\",\n    hour12: true,\n  });\n  return date + \", \" + time;\n};\n\n// Convert 32 byte address to readable 58 byte string\nexport const getAddress = (addr) => {\n  if (!addr) return;\n  return algosdk.encodeAddress(Base64.toUint8Array(addr));\n};\n","import React from \"react\";\nimport { ToastContainer } from \"react-toastify\";\nimport PropTypes from \"prop-types\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst Notification = () => (\n  <ToastContainer\n    position=\"bottom-center\"\n    autoClose={5000}\n    hideProgressBar\n    newestOnTop\n    closeOnClick\n    rtl={false}\n    pauseOnFocusLoss\n    draggable={false}\n    pauseOnHover\n  />\n);\n\nconst NotificationSuccess = ({ text }) => (\n  <div>\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst NotificationError = ({ text }) => (\n  <div>\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst Props = {\n  text: PropTypes.string,\n};\n\nconst DefaultProps = {\n  text: \"\",\n};\n\nNotificationSuccess.propTypes = Props;\nNotificationSuccess.defaultProps = DefaultProps;\n\nNotificationError.propTypes = Props;\nNotificationError.defaultProps = DefaultProps;\n\nexport { Notification, NotificationSuccess, NotificationError };\n","import * as React from \"react\";\nimport Backdrop from \"@mui/material/Backdrop\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\n\nexport default function Loader() {\n  return (\n    <Backdrop\n      sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }}\n      open={true}\n    >\n      <CircularProgress color=\"inherit\" />\n    </Backdrop>\n  );\n}\n","import React from \"react\"\nimport \"../../input.css\"\n\nexport const Input = ({ name, type, value, onChange }) => {\n  return (\n    <div className=\"form__group field\">\n      <input\n        type={type}\n        className=\"form__field\"\n        placeholder={name}\n        name={name}\n        id={name}\n        value={value}\n        onChange={onChange}\n        required\n      />\n      <label htmlFor={name} className=\"form__label\">\n        {name}\n      </label>\n    </div>\n  )\n}\n","import * as React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Modal from \"@mui/material/Modal\";\nimport PropTypes from \"prop-types\";\nimport { Input } from \"./Form\";\nimport { Container, Tooltip } from \"@mui/material\";\nimport { Info } from \"@mui/icons-material\";\n\nconst style = {\n  position: \"absolute\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translate(-50%, -50%)\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  bgcolor: \"#022646\",\n  border: \"2px solid #000\",\n  boxShadow: 24,\n  p: 4,\n};\n\nconst CreateDao = ({ createDao }) => {\n  const [quorum, setQuorum] = React.useState(\"\");\n  const [voteTimeLimit, setVoteTime] = React.useState(\"\");\n\n  const startTxn = async () => {\n    if (quorum === \"\" && voteTimeLimit === \"\") return;\n    let voteTime = Number(voteTimeLimit) * 60 * 60;\n    await createDao({ quorum, voteTime });\n  };\n\n  const [open, setOpen] = React.useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  return (\n    <div>\n      <Button onClick={handleOpen}>\n        <i className=\"bi bi-file-earmark-code-fill dao_icon\"></i>\n      </Button>\n\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Container sx={style}>\n          <p className=\"title\">\n            Create Dao. 00\n            <Tooltip title=\"Kickstart your campaign\" arrow>\n              <Info color=\"primary\" sx={{ cursor: \"pointer\" }} />\n            </Tooltip>\n          </p>\n          <Input\n            name={\"Quorum %\"}\n            type=\"number\"\n            value={quorum}\n            onChange={(e) => setQuorum(e.target.value)}\n            className={{}}\n          />\n          <Input\n            name={\"Vote time in Hours\"}\n            type=\"number\"\n            value={voteTimeLimit}\n            onChange={(e) => setVoteTime(e.target.value)}\n          />\n          <Button onClick={() => startTxn()} variant=\"contained\">\n            Create Dao\n          </Button>\n        </Container>\n      </Modal>\n    </div>\n  );\n};\n\nCreateDao.propTypes = {\n  createDao: PropTypes.func.isRequired,\n};\n\nexport default CreateDao;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Typography, Box, Grid, Button } from \"@mui/material\";\nimport { Drawer } from \"@mui/material\";\nimport { Logout } from \"@mui/icons-material\";\nimport { microAlgosToString } from \"../../utils/conversions\";\nimport CreateDao from \"./CreateDao\";\nimport { daoAppId } from \"../../utils/constants\";\n\nconst Header = ({ address, name, balance, daoData, createDao, disconnect }) => {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <Box className=\"hero\">\n        <Box className=\"hero_dao\">\n          <Box className=\"logo\">\n            <Typography variant=\"string\">\n              Dao <span style={{ opacity: \"0.5\" }}>DApp.</span>\n            </Typography>\n          </Box>\n          {daoAppId ? <></> : <CreateDao createDao={createDao} />}\n\n          <Typography align=\"center\" variant=\"string\" className=\"dao_showcase\">\n            DAO DApp\n          </Typography>\n\n          <Box className=\"options\">\n            <Box>\n              <Typography color={\"#aec1c5\"} fontSize=\"1.2rem\">\n                {\" \"}\n                <span style={{ color: \"#fcbd7a\" }}>#</span> Account:{\" \"}\n                <a\n                  href={`https://testnet.algoexplorer.io/address/${address}`}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  {name}\n                </a>\n              </Typography>\n              <Grid container spacing={0} width=\"25rem\" marginY={\"0.5rem\"}>\n                <Grid item>\n                  <Button href=\"#contribute\" xs={6} className=\"options-nav\">\n                    Contribute\n                  </Button>\n                  <Button href=\"#redeem\" xs={6} className=\"options-nav\">\n                    redeem shares\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button href=\"#transfer\" xs={6} className=\"options-nav\">\n                    transfer shares\n                  </Button>\n                  <Button\n                    href=\"#create-proposal\"\n                    xs={6}\n                    className=\"options-nav\"\n                  >\n                    Create proposal\n                  </Button>\n                </Grid>\n              </Grid>\n\n              <Typography color={\"#aec1c5\"} fontSize=\"1rem\">\n                <span style={{ color: \"#fcbd7a\" }}>#</span> Wallet Balance:{\" \"}\n                {microAlgosToString(balance)} ALGO\n              </Typography>\n              <Typography color={\"#aec1c5\"} fontSize=\"1rem\">\n                <span style={{ color: \"#fcbd7a\" }}>#</span> Shares:{\" \"}\n                {daoData\n                  ? daoData.userShares\n                    ? microAlgosToString(daoData.userShares)\n                    : 0\n                  : 0}{\" \"}\n                Share(s)\n              </Typography>\n            </Box>\n          </Box>\n        </Box>\n      </Box>\n      <div\n        className={`menu ${open && \"active\"}`}\n        onClick={() => {\n          open === false ? setOpen(true) : setOpen(false);\n        }}\n      >\n        <Typography variant=\"button\" color={\"#fcbd7a\"} mr=\"0.5rem\">\n          menu\n        </Typography>\n        <div>\n          <div className=\"one\">\n            <div className=\"menu-dots\"></div>\n            <div className=\"menu-dots\"></div>\n          </div>\n          <div className=\"two\">\n            <div className=\"menu-dots\"></div>\n            <div className=\"menu-dots\"></div>\n          </div>\n        </div>\n      </div>\n      <Drawer\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        onClose={() => setOpen(false)}\n      >\n        <Box sx={{ display: \"flex\", flexDirection: \"column\", padding: \"3rem\" }}>\n          <Button href=\"#contribute\">Contribute</Button>\n          <Button href=\"#redeem\">redeem shares</Button>\n          <Button href=\"#transfer\">transfer shares</Button>\n          <Button href=\"#create-proposal\">create proposal</Button>\n          <Button href=\"#proposals\">Proposals</Button>\n          <Button\n            onClick={() => {\n              disconnect();\n            }}\n            startIcon={<Logout />}\n            variant={\"contained\"}\n          >\n            disconnect\n          </Button>\n        </Box>\n      </Drawer>\n    </>\n  );\n};\n\nHeader.propTypes = {\n  address: PropTypes.string.isRequired,\n  balance: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  daoData: PropTypes.instanceOf(Object).isRequired,\n  createDao: PropTypes.func.isRequired,\n  disconnect: PropTypes.func.isRequired,\n};\n\nexport default Header;\n","import Button from \"@mui/material/Button\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Input } from \"./Form\";\nimport { Tooltip } from \"@mui/material\";\nimport { Info } from \"@mui/icons-material\";\nimport { stringToMicroAlgos } from \"../../utils/conversions\";\n\nconst Contribute = ({ contributeToDAO }) => {\n  const [inputValue, setInputValue] = React.useState(\"\");\n\n  const startTxn = async () => {\n    if (inputValue === \"\") return;\n    let amount = stringToMicroAlgos(inputValue);\n    await contributeToDAO(amount);\n  };\n\n  return (\n    <div id=\"contribute\" className=\"option\">\n      <p className=\"title\">\n        Contribute. _01\n        <Tooltip title=\"Deposit token to join Dao and receive shares\" arrow>\n          <Info color=\"primary\" sx={{ cursor: \"pointer\" }} />\n        </Tooltip>\n      </p>\n      <Input\n        name={\"Amount In ALGO\"}\n        type=\"number\"\n        value={inputValue}\n        onChange={(e) => setInputValue(e.target.value)}\n      />\n      <Button onClick={() => startTxn()} variant=\"contained\">\n        Contribute\n      </Button>\n    </div>\n  );\n};\n\nContribute.propTypes = {\n  contributeToDAO: PropTypes.func.isRequired,\n};\nexport default Contribute;\n","import Button from \"@mui/material/Button\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Input } from \"./Form\";\nimport { Tooltip } from \"@mui/material\";\nimport { Info } from \"@mui/icons-material\";\nimport { stringToMicroAlgos } from \"../../utils/conversions\";\n\nconst Redeem = ({ redeemShares }) => {\n  const [inputValue, setInputValue] = React.useState(\"\");\n\n  const startTxn = async () => {\n    if (inputValue === \"\") return;\n    let amount = stringToMicroAlgos(inputValue);\n    await redeemShares(amount);\n  };\n\n  return (\n    <div id=\"redeem\" className=\"option\">\n      <p className=\"title\">\n        Redeem Shares. _02\n        <Tooltip title=\"Convert shares back to token\" arrow>\n          <Info color=\"primary\" sx={{ cursor: \"pointer\" }} />\n        </Tooltip>\n      </p>\n      <Input\n        name={\"Amount of Shares\"}\n        type=\"number\"\n        value={inputValue}\n        onChange={(e) => setInputValue(e.target.value)}\n      />\n      <Button onClick={() => startTxn()} variant=\"contained\">\n        Redeem\n      </Button>\n    </div>\n  );\n};\n\nRedeem.propTypes = {\n  redeemShares: PropTypes.func.isRequired,\n};\n\nexport default Redeem;\n","import Button from \"@mui/material/Button\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Input } from \"./Form\";\nimport { Tooltip } from \"@mui/material\";\nimport { Info } from \"@mui/icons-material\";\nimport { stringToMicroAlgos } from \"../../utils/conversions\";\n\nconst Transfer = ({ transferShares }) => {\n  const [amountTo, setAmount] = React.useState(\"\");\n  const [sendTo, setSendTo] = React.useState(\"\");\n\n  const startTxn = async () => {\n    if (amountTo === \"\" && sendTo === \"\") return;\n    let amount = stringToMicroAlgos(amountTo);\n    await transferShares({ amount, sendTo });\n  };\n\n  return (\n    <div id=\"transfer\" className=\"option\">\n      <p className=\"title\">\n        Transfer Shares. _03\n        <Tooltip\n          title=\"Transfer shares to other accounts making them members of Dao\"\n          arrow\n        >\n          <Info color=\"primary\" sx={{ cursor: \"pointer\" }} />\n        </Tooltip>\n      </p>\n      <Input\n        name={\"Amount of Shares\"}\n        type=\"number\"\n        value={amountTo}\n        onChange={(e) => setAmount(e.target.value)}\n      />\n      <Input\n        name={\"Receiver's Address\"}\n        type=\"text\"\n        value={sendTo}\n        onChange={(e) => setSendTo(e.target.value)}\n      />\n      <Button onClick={() => startTxn()} variant=\"contained\">\n        Transfer\n      </Button>\n    </div>\n  );\n};\n\nTransfer.propTypes = {\n  transferShares: PropTypes.func.isRequired,\n};\n\nexport default Transfer;\n","import Button from \"@mui/material/Button\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Input } from \"./Form\";\nimport { Tooltip } from \"@mui/material\";\nimport { Info } from \"@mui/icons-material\";\nimport { stringToMicroAlgos } from \"../../utils/conversions\";\n\nconst Proposal = ({ createProposal }) => {\n  const [amountTo, setAmount] = React.useState(\"\");\n  const [name, setName] = React.useState(\"\");\n  const [recipient, setRecipient] = React.useState(\"\");\n\n  const startTxn = async () => {\n    if (amountTo === \"\" && name === \"\" && recipient === \"\") return;\n    let amount = stringToMicroAlgos(amountTo);\n    await createProposal({ amount, name, recipient });\n  };\n\n  return (\n    <div id=\"create-proposal\" className=\"option\">\n      <p className=\"title\">\n        Create Proposal. _04\n        <Tooltip title=\"Kickstart your new proposal\" arrow>\n          <Info color=\"primary\" sx={{ cursor: \"pointer\" }} />\n        </Tooltip>\n      </p>\n      <Input\n        name={\"Name\"}\n        type=\"text\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n      <Input\n        name={\"Amount In ALGO\"}\n        type=\"number\"\n        value={amountTo}\n        onChange={(e) => setAmount(e.target.value)}\n      />\n      <Input\n        name={\"Recipient\"}\n        type=\"text\"\n        value={recipient}\n        onChange={(e) => setRecipient(e.target.value)}\n      />\n      <Button onClick={() => startTxn()} variant=\"contained\">\n        Create Proposal\n      </Button>\n    </div>\n  );\n};\n\nProposal.propTypes = {\n  createProposal: PropTypes.func.isRequired,\n};\n\nexport default Proposal;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"@mui/material/Button\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableContainer,\n  TableRow,\n  Paper,\n} from \"@mui/material\";\nimport {\n  convertTime,\n  microAlgosToString,\n  truncateAddress,\n} from \"../../utils/conversions\";\n\nconst Proposals = ({\n  address,\n  proposals,\n  lockInProposal,\n  voteProposal,\n  executeProposal,\n  dao,\n}) => {\n  const proposalLockedIn = (proposal) => proposal.isLocked === 1;\n\n  const proposalEnded = (proposal) => proposal.ended === 1;\n\n  const proposalSuccessfull = (proposal) => proposal.success === 1;\n\n  const userOptedIn = () => dao.userShares > 0 && dao.userId !== 0;\n\n  function isFinished(proposal) {\n    const now = new Date().getTime();\n    const proposalEnd = new Date(parseInt(proposal.ends) * 1000);\n    return proposalEnd > now > 0 ? false : true;\n  }\n\n  function hasVoted(proposal) {\n    return proposal.userVoteStatus === 1;\n  }\n\n  const startLockInTxn = async (proposal) => {\n    await lockInProposal(proposal);\n  };\n\n  const startVoteTxn = async (proposal) => {\n    await voteProposal(proposal);\n  };\n\n  const startExecTxn = async (proposal) => {\n    await executeProposal(proposal);\n  };\n\n  return (\n    <>\n      <div id=\"proposals\" className=\"option\">\n        <p className=\"title\">Proposals. _05</p>\n      </div>\n      <TableContainer\n        component={Paper}\n        sx={{\n          background: \"#02315a\",\n          marginBottom: \"5rem\",\n        }}\n      >\n        <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"proposals\">\n          <TableHead>\n            <TableRow>\n              <TableCell\n                align=\"center\"\n                sx={{ color: \"#aec1c5\", fontSize: \"1rem\" }}\n              >\n                ID\n              </TableCell>\n              <TableCell\n                align=\"center\"\n                sx={{ color: \"#aec1c5\", fontSize: \"1rem\" }}\n              >\n                Name\n              </TableCell>\n              <TableCell\n                align=\"center\"\n                sx={{ color: \"#aec1c5\", fontSize: \"1rem\" }}\n              >\n                Amount\n              </TableCell>\n              <TableCell\n                align=\"center\"\n                sx={{ color: \"#aec1c5\", fontSize: \"1rem\" }}\n              >\n                Recipient\n              </TableCell>\n              <TableCell\n                align=\"center\"\n                sx={{ color: \"#aec1c5\", fontSize: \"1rem\" }}\n              >\n                Votes\n              </TableCell>\n              <TableCell\n                align=\"center\"\n                sx={{ color: \"#aec1c5\", fontSize: \"1rem\" }}\n              >\n                Vote\n              </TableCell>\n              <TableCell\n                align=\"center\"\n                sx={{ color: \"#aec1c5\", fontSize: \"1rem\" }}\n              >\n                Ends on\n              </TableCell>\n              <TableCell\n                align=\"center\"\n                sx={{ color: \"#aec1c5\", fontSize: \"1rem\" }}\n              >\n                Status\n              </TableCell>\n            </TableRow>\n          </TableHead>\n\n          {/* ****************Table Body*************** */}\n          <TableBody>\n            {proposals ? (\n              proposals.map((proposal) => (\n                <TableRow\n                  key={proposal.appId}\n                  sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n                >\n                  <TableCell\n                    align=\"center\"\n                    component=\"th\"\n                    scope=\"row\"\n                    sx={{ color: \"#aec1c5\" }}\n                  >\n                    {proposal.appId}\n                  </TableCell>\n                  <TableCell align=\"center\" sx={{ color: \"#aec1c5\" }}>\n                    {proposal.name}\n                  </TableCell>\n                  <TableCell align=\"center\" sx={{ color: \"#aec1c5\" }}>\n                    {microAlgosToString(proposal.amount)} ALGO\n                  </TableCell>\n                  <TableCell align=\"center\" sx={{ color: \"#aec1c5\" }}>\n                    <a\n                      href={`https://testnet.algoexplorer.io/address/${proposal.recipient}`}\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                    >\n                      {truncateAddress(proposal.recipient)}\n                    </a>\n                  </TableCell>\n                  <TableCell align=\"center\" sx={{ color: \"#aec1c5\" }}>\n                    {proposal.votes ? microAlgosToString(proposal.votes) : \"0\"}\n                  </TableCell>\n                  <TableCell align=\"center\" sx={{ color: \"#aec1c5\" }}>\n                    {\" \"}\n                    {proposalLockedIn(proposal) ? (\n                      isFinished(proposal) ? (\n                        \"Vote finished\"\n                      ) : userOptedIn ? (\n                        hasVoted(proposal) ? (\n                          \"You already voted\"\n                        ) : (\n                          <Button\n                            onClick={(e) => startVoteTxn(proposal)}\n                            variant=\"contained\"\n                          >\n                            Vote\n                          </Button>\n                        )\n                      ) : (\n                        \"Voting In Progress\"\n                      )\n                    ) : proposal.creatorAddress === address ? (\n                      <Button\n                        onClick={(e) => startLockInTxn(proposal)}\n                        variant=\"contained\"\n                      >\n                        Lock-in\n                      </Button>\n                    ) : (\n                      \"Voting has not started\"\n                    )}\n                  </TableCell>\n                  <TableCell align=\"center\" sx={{ color: \"#aec1c5\" }}>\n                    {proposal.ends ? convertTime(proposal.ends) : \"---\"}\n                  </TableCell>\n                  <TableCell sx={{ color: \"#aec1c5\" }} align=\"center\">\n                    {proposalEnded(proposal) ? (\n                      proposalSuccessfull(proposal) ? (\n                        \"Successful\"\n                      ) : (\n                        \"Not Successful\"\n                      )\n                    ) : proposal.creatorAddress === address ? (\n                      <Button\n                        onClick={(e) => startExecTxn(proposal)}\n                        variant=\"contained\"\n                        disabled={\n                          !proposalLockedIn(proposal) || !isFinished(proposal)\n                        }\n                      >\n                        Execute\n                      </Button>\n                    ) : (\n                      \"Not yet decided\"\n                    )}\n                  </TableCell>\n                </TableRow>\n              ))\n            ) : (\n              <></>\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n};\n\nProposals.propTypes = {\n  address: PropTypes.string.isRequired,\n  proposals: PropTypes.instanceOf(Array).isRequired,\n  lockInProposal: PropTypes.func.isRequired,\n  voteProposal: PropTypes.func.isRequired,\n  executeProposal: PropTypes.func.isRequired,\n  dao: PropTypes.instanceOf(Object).isRequired,\n};\n\nexport default Proposals;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { toast } from \"react-toastify\";\nimport { indexerClient } from \"../../utils/constants\";\nimport { Container } from \"@mui/system\";\nimport { Box } from \"@mui/material\";\nimport { ThemeProvider } from \"@mui/material\";\nimport { createTheme } from \"@mui/material/styles\";\nimport { NotificationSuccess, NotificationError } from \"../utils/Notifications\";\nimport Loader from \"../utils/Loader\";\nimport Header from \"./Header\";\nimport Contribute from \"./Contribute\";\nimport Redeem from \"./Redeem\";\nimport Transfer from \"./Transfer\";\nimport Proposal from \"./CreateProposal\";\nimport Proposals from \"./Proposals\";\nimport {\n  getDaoDataAction,\n  createDaoAction,\n  contributeToDaoAction,\n  redeemSharesAction,\n  transferSharesAction,\n} from \"../../utils/dao\";\n\nimport {\n  getProposalsAction,\n  createProposalAction,\n  lockInProposalAction,\n  voteAction,\n  executeProposalAction,\n} from \"../../utils/proposal\";\n\nconst Dao = ({ address, name, disconnect }) => {\n  const [balance, setBalance] = useState(0);\n  const [daoData, setDaoData] = useState({});\n  const [proposals, setProposals] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const getDaoData = useCallback(async () => {\n    setLoading(true);\n    getDaoDataAction(address)\n      .then((dao) => {\n        if (dao) {\n          setDaoData(dao);\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, [address]);\n\n  const getProposals = useCallback(async () => {\n    setLoading(true);\n    getProposalsAction(address)\n      .then((proposals) => {\n        if (proposals) {\n          setProposals(proposals);\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n      .finally((_) => {\n        setLoading(false);\n      });\n  }, [address]);\n\n  const fetchBalance = useCallback(async () => {\n    indexerClient\n      .lookupAccountByID(address)\n      .do()\n      .then((response) => {\n        const _balance = response.account.amount;\n        setBalance(_balance);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, [address]);\n\n  const createDao = async (data) => {\n    setLoading(true);\n    createDaoAction(address, data)\n      .then(() => {\n        toast(<NotificationSuccess text=\" DAO created successfully.\" />);\n        getDaoData();\n        getProposals();\n        fetchBalance();\n      })\n      .catch((error) => {\n        console.log(error);\n        toast(<NotificationError text=\" Failed to create DAO.\" />);\n        setLoading(false);\n      });\n  };\n\n  const contributeToDAO = async (amount) => {\n    setLoading(true);\n    contributeToDaoAction(address, daoData, amount)\n      .then(() => {\n        toast(<NotificationSuccess text=\" Contribution added successfully.\" />);\n        getDaoData();\n        getProposals();\n        fetchBalance();\n      })\n      .catch((error) => {\n        setLoading(false);\n        console.log(error);\n        toast(<NotificationError text=\" Failed to contribution.\" />);\n      });\n  };\n\n  const redeemShares = async (amount) => {\n    setLoading(true);\n    redeemSharesAction(address, daoData, amount)\n      .then(() => {\n        toast(<NotificationSuccess text=\" Shares redeemed successfully.\" />);\n        getDaoData();\n        getProposals();\n        fetchBalance();\n      })\n      .catch((error) => {\n        setLoading(false);\n        console.log(error);\n        toast(<NotificationError text=\" Failed to redeem shares.\" />);\n      });\n  };\n\n  const transferShares = async (data) => {\n    setLoading(true);\n    transferSharesAction(address, daoData, data)\n      .then(() => {\n        toast(<NotificationSuccess text=\" Shares transferred successfully.\" />);\n        getDaoData();\n        getProposals();\n        fetchBalance();\n      })\n      .catch((error) => {\n        setLoading(false);\n        console.log(error);\n        toast(<NotificationError text=\" Failed to transfer shares.\" />);\n      });\n  };\n\n  const createProposal = async (data) => {\n    setLoading(true);\n    createProposalAction(address, data, daoData)\n      .then(() => {\n        toast(<NotificationSuccess text=\" Proposal added successfully.\" />);\n        getProposals();\n        fetchBalance();\n      })\n      .catch((error) => {\n        setLoading(false);\n        console.log(error);\n        toast(<NotificationError text=\" Failed to add proposal.\" />);\n      });\n  };\n\n  const lockInProposal = async (proposal) => {\n    setLoading(true);\n    lockInProposalAction(address, proposal, daoData)\n      .then(() => {\n        toast(<NotificationSuccess text=\" Proposal locked-in  Dao .\" />);\n        getDaoData();\n        getProposals();\n        fetchBalance();\n      })\n      .catch((error) => {\n        setLoading(false);\n        console.log(error);\n        toast(<NotificationError text=\" Failed to lock-in proposal.\" />);\n      });\n  };\n\n  const voteProposal = async (proposal) => {\n    setLoading(true);\n    voteAction(address, proposal, daoData)\n      .then(() => {\n        toast(<NotificationSuccess text=\" Vote successful.\" />);\n        getProposals();\n        fetchBalance();\n      })\n      .catch((error) => {\n        setLoading(false);\n        console.log(error);\n        toast(<NotificationError text=\" Vote failed.\" />);\n      });\n  };\n\n  const executeProposal = async (proposal) => {\n    setLoading(true);\n    executeProposalAction(address, proposal, daoData)\n      .then(() => {\n        toast(<NotificationSuccess text=\" Proposal executed successfully.\" />);\n        getDaoData();\n        getProposals();\n        fetchBalance();\n      })\n      .catch((error) => {\n        setLoading(false);\n        console.log(error);\n        toast(<NotificationError text=\" Failed to execute proposal.\" />);\n      });\n  };\n\n  const theme = createTheme({\n    palette: {\n      primary: {\n        light: \"#fcbd7a\",\n        main: \"#f1a14b\",\n        dark: \"#fdb261d8\",\n        contrastText: \"#fff\",\n      },\n    },\n  });\n  useEffect(() => {\n    fetchBalance();\n    getDaoData();\n    getProposals();\n  }, [fetchBalance, getDaoData, getProposals]);\n\n  if (loading) return <Loader />;\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"app\">\n        <Header\n          address={address}\n          name={name}\n          balance={balance}\n          daoData={daoData}\n          createDao={createDao}\n          disconnect={disconnect}\n        />\n        <Container>\n          <Contribute contributeToDAO={contributeToDAO} />\n          <Box\n            sx={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"flex-end\",\n              justifyContent: \"flex-end\",\n            }}\n          >\n            <Redeem redeemShares={redeemShares} />\n          </Box>\n          <Transfer transferShares={transferShares} />\n          <Box\n            sx={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"flex-end\",\n              justifyContent: \"flex-end\",\n            }}\n          >\n            <Proposal createProposal={createProposal} />\n          </Box>\n          <Proposals\n            address={address}\n            proposals={proposals}\n            lockInProposal={lockInProposal}\n            voteProposal={voteProposal}\n            executeProposal={executeProposal}\n            dao={daoData}\n          />\n        </Container>\n      </div>\n    </ThemeProvider>\n  );\n};\nDao.propTypes = {\n  address: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  disconnect: PropTypes.func.isRequired,\n};\nexport default Dao;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"@mui/material\";\nimport { AccountBalanceWallet } from \"@mui/icons-material\";\n\nconst Cover = ({ name, login, coverImg }) => {\n  if ((name, login, coverImg)) {\n    return (\n      <div\n        className=\"cover-page\"\n        style={{ background: \"#000\", minHeight: \"100vh\" }}\n      >\n        <div>\n          <img src={coverImg} alt=\"dao\" />\n        </div>\n        <div className=\"loginBox\">\n          <div>\n            <h1 style={{ margin: \"1rem\" }}>{name}</h1>\n            <p style={{ margin: \"0.5rem\" }}>\n              Please connect your wallet to continue.\n            </p>\n            <Button\n              onClick={login}\n              variant=\"outlined\"\n              color=\"primary\"\n              startIcon={<AccountBalanceWallet />}\n            >\n              Connect Wallet\n            </Button>\n          </div>\n          <p>Powered by ALGORAND</p>\n        </div>\n      </div>\n    );\n  }\n  return null;\n};\n\nCover.propTypes = {\n  name: PropTypes.string,\n};\n\nCover.defaultProps = {\n  name: \"\",\n};\n\nexport default Cover;\n","export default __webpack_public_path__ + \"static/media/DAO.d4104a3f.jpg\";","import React, { useState } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { myAlgoConnect } from \"./utils/constants\";\nimport { Notification } from \"./components/utils/Notifications\";\nimport Dao from \"./components/dao/Dao\";\nimport Cover from \"./components/utils/Cover\";\nimport coverImg from \"./assets/img/DAO.jpg\";\nimport \"./App.css\";\n\nconst App = function AppWrapper() {\n  const [address, setAddress] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const connectWallet = async () => {\n    myAlgoConnect\n      .connect()\n      .then((accounts) => {\n        const _account = accounts[0];\n        setAddress(_account.address);\n        setName(_account.name);\n      })\n      .catch((error) => {\n        console.log(\"Could not connect to MyAlgo wallet\");\n        console.error(error);\n      });\n  };\n\n  const disconnect = () => {\n    setAddress(\"\");\n    setName(\"\");\n  };\n  return (\n    <>\n      <Notification />\n      {address && name ? (\n        <Container fluid=\"md\">\n          <main>\n            <Dao address={address} name={name} disconnect={disconnect} />\n          </main>\n        </Container>\n      ) : (\n        <Cover name=\"DAO DApp\" login={connectWallet} coverImg={coverImg} />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n","import algosdk from \"algosdk\";\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\n\nconst config = {\n  algodToken: \"\",\n  algodServer: \"https://node.testnet.algoexplorerapi.io\",\n  algodPort: \"\",\n  indexerToken: \"\",\n  indexerServer: \"https://algoindexer.testnet.algoexplorerapi.io\",\n  indexerPort: \"\",\n};\n\nexport const algodClient = new algosdk.Algodv2(\n  config.algodToken,\n  config.algodServer,\n  config.algodPort\n);\n\nexport const indexerClient = new algosdk.Indexer(\n  config.indexerToken,\n  config.indexerServer,\n  config.indexerPort\n);\n\nexport const myAlgoConnect = new MyAlgoConnect();\n\nexport const minRound = 21540981;\n\n// https://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0002.md\nexport const daoNote = \"algodao:uv01\";\nexport const proposalNote = \"algodaoproposal:uv02\";\n\n//DAO\n// Maximum local storage allocation, immutable\nexport const numLocalIntsDao = 2;\n// Local variables stored as Int: id, shares\nexport const numLocalBytesDao = 0;\n\n// Maximum global storage allocation, immutable\nexport const numGlobalIntsDao = 6;\n// Global variables stored as Int:\nexport const numGlobalBytesDao = 0;\n\n// PROPOSAL\n// Maximum local storage allocation, immutable\nexport const numLocalIntsProposal = 1;\n// Local variables stored as Int: vote_status\nexport const numLocalBytesProposal = 0;\n\n// Maximum global storage allocation, immutable\nexport const numGlobalIntsProposal = 10;\n// Global variables stored as Int: amount, ends, votes, is_locked, executed, success, ended, daoAppId\nexport const numGlobalBytesProposal = 2;\n// Global variables stored as Bytes: name, recipient\n\nexport const ALGORAND_DECIMALS = 6;\n\n// App Id of Dao\nexport const daoAppId = 114731548;\n","import algosdk from \"algosdk\";\nimport * as algo from \"./constants\";\n/* eslint import/no-webpack-loader-syntax: off */\nimport ApprovalProgram from \"!!raw-loader!../contracts/dao_approval.teal\";\nimport ClearProgram from \"!!raw-loader!../contracts/dao_clear.teal\";\nimport { utf8ToBase64String } from \"./conversions\";\n\nexport class DAO {\n  constructor(\n    appId,\n    appAddress,\n    creatorAddress,\n    quorum,\n    totalShares,\n    voteTime,\n    userId,\n    userShares\n  ) {\n    this.appId = appId;\n    this.appAddress = appAddress;\n    this.creatorAddress = creatorAddress;\n    this.quorum = quorum;\n    this.totalShares = totalShares;\n    this.voteTime = voteTime;\n    this.userId = userId;\n    this.userShares = userShares;\n  }\n}\n\n// Compile smart contract in .teal format to program\nconst compileProgram = async (programSource) => {\n  let encoder = new TextEncoder();\n  let programBytes = encoder.encode(programSource);\n  let compileResponse = await algo.algodClient.compile(programBytes).do();\n  return new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\n};\n\n// CREATE DAO: ApplicationCreateTxn\nexport const createDaoAction = async (senderAddress, dao) => {\n  console.log(\"Creating DAO...\");\n  console.log(dao);\n  let params = await algo.algodClient.getTransactionParams().do();\n\n  // Compile Programs\n  const compiledApprovalProgram = await compileProgram(ApprovalProgram);\n  const compiledClearProgram = await compileProgram(ClearProgram);\n\n  // Build note to identify transaction later and required app args as Uint8Array\n  let quorum = algosdk.encodeUint64(Number(dao.quorum));\n  let voteTime = algosdk.encodeUint64(Number(dao.voteTime));\n  let note = new TextEncoder().encode(algo.daoNote);\n  let appArgs = [quorum, voteTime];\n\n  let txn = algosdk.makeApplicationCreateTxnFromObject({\n    from: senderAddress,\n    suggestedParams: params,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    approvalProgram: compiledApprovalProgram,\n    clearProgram: compiledClearProgram,\n    numLocalInts: algo.numLocalIntsDao,\n    numLocalByteSlices: algo.numLocalBytesDao,\n    numGlobalInts: algo.numGlobalIntsDao,\n    numGlobalByteSlices: algo.numGlobalBytesDao,\n    note: note,\n    appArgs: appArgs,\n  });\n\n  // Get transaction ID\n  let txId = txn.txID().toString();\n\n  // Sign & submit the transaction\n  let signedTxn = await algo.myAlgoConnect.signTransaction(txn.toByte());\n  console.log(\"Signed transaction with txID: %s\", txId);\n  await algo.algodClient.sendRawTransaction(signedTxn.blob).do();\n\n  // Wait for transaction to be confirmed\n  let confirmedTxn = await algosdk.waitForConfirmation(\n    algo.algodClient,\n    txId,\n    4\n  );\n\n  // Get the completed Transaction\n  console.log(\n    \"Transaction \" +\n      txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n\n  // Get created application id and notify about completion\n  let transactionResponse = await algo.algodClient\n    .pendingTransactionInformation(txId)\n    .do();\n\n  let appId = transactionResponse[\"application-index\"];\n  console.log(\"Created new app-id: \", appId);\n  return appId;\n};\n\n// Contribute To Dao\nexport const contributeToDaoAction = async (senderAddress, dao, amount) => {\n  console.log(\"Sending Funds to DAO...\");\n\n  let params = await algo.algodClient.getTransactionParams().do();\n\n  // Create ApplicationOptIn Transaction\n  let optInTxn = algosdk.makeApplicationOptInTxnFromObject({\n    from: senderAddress,\n    suggestedParams: params,\n    appIndex: dao.appId,\n  });\n\n  let contributeArg = new TextEncoder().encode(\"contribute\");\n  let amountArg = algosdk.encodeUint64(amount);\n  let appArgs = [contributeArg, amountArg];\n\n  // Create ApplicationCallTxn\n  let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\n    from: senderAddress,\n    appIndex: dao.appId,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    suggestedParams: params,\n    appArgs: appArgs,\n  });\n\n  // Create PaymentTxn\n  let paymentTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: senderAddress,\n    to: dao.appAddress,\n    amount: amount,\n    suggestedParams: params,\n  });\n\n  let txnArray;\n  if (dao.userId === 0) {\n    // call the optIn txn then the rest\n    txnArray = [optInTxn, appCallTxn, paymentTxn];\n\n    // Create group transaction out of previously build transactions\n    let groupID = algosdk.computeGroupID(txnArray);\n    for (let i = 0; i < 3; i++) txnArray[i].group = groupID;\n  } else {\n    txnArray = [appCallTxn, paymentTxn];\n    // Create group transaction out of previously build transactions\n    let groupID = algosdk.computeGroupID(txnArray);\n    for (let i = 0; i < 2; i++) txnArray[i].group = groupID;\n  }\n\n  // Sign & submit the group transaction\n  let signedTxn = await algo.myAlgoConnect.signTransaction(\n    txnArray.map((txn) => txn.toByte())\n  );\n\n  console.log(\"Signed group transaction\");\n\n  let tx = await algo.algodClient\n    .sendRawTransaction(signedTxn.map((txn) => txn.blob))\n    .do();\n\n  // Wait for group transaction to be confirmed\n  let confirmedTxn = await algosdk.waitForConfirmation(\n    algo.algodClient,\n    tx.txId,\n    4\n  );\n\n  // Notify about completion\n  console.log(\n    \"Group transaction \" +\n      tx.txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n};\n\n// REDEEM SHARES: no_op_call\nexport const redeemSharesAction = async (senderAddress, dao, amount) => {\n  console.log(\"Redeeming Shares...\");\n\n  let params = await algo.algodClient.getTransactionParams().do();\n  params.fee = algosdk.ALGORAND_MIN_TX_FEE * 2;\n  params.flatFee = true;\n\n  // Build required app args as Uint8Array\n  let amountArg = algosdk.encodeUint64(amount);\n  let redeemArg = new TextEncoder().encode(\"redeem\");\n  let appArgs = [redeemArg, amountArg];\n\n  // Create ApplicationCallTxn\n  let txn = algosdk.makeApplicationCallTxnFromObject({\n    from: senderAddress,\n    appIndex: dao.appId,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    suggestedParams: params,\n    appArgs: appArgs,\n  });\n\n  // Get transaction ID\n  let txId = txn.txID().toString();\n\n  // Sign & submit the transaction\n  let signedTxn = await algo.myAlgoConnect.signTransaction(txn.toByte());\n  console.log(\"Signed transaction with txID: %s\", txId);\n  await algo.algodClient.sendRawTransaction(signedTxn.blob).do();\n\n  // Wait for transaction to be confirmed\n  const confirmedTxn = await algosdk.waitForConfirmation(\n    algo.algodClient,\n    txId,\n    4\n  );\n\n  // Get the completed Transaction\n  console.log(\n    \"Transaction \" +\n      txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n};\n\n// TRANSFER SHARES: no_op_call\nexport const transferSharesAction = async (senderAddress, dao, data) => {\n  console.log(\"Transferring Shares...\");\n  console.log(data);\n  let params = await algo.algodClient.getTransactionParams().do();\n  if (!algosdk.isValidAddress(data.sendTo)) {\n    throw new Error(\"Invalid Address\");\n  }\n  // Build required app args as Uint8Array\n  let amountArg = algosdk.encodeUint64(data.amount);\n  let transferArg = new TextEncoder().encode(\"transfer\");\n  let appArgs = [transferArg, amountArg];\n  let accounts = [data.sendTo];\n\n  // Create ApplicationCallTxn\n  let txn = algosdk.makeApplicationCallTxnFromObject({\n    from: senderAddress,\n    appIndex: dao.appId,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    suggestedParams: params,\n    appArgs: appArgs,\n    accounts: accounts,\n  });\n\n  // Get transaction ID\n  let txId = txn.txID().toString();\n\n  // Sign & submit the transaction\n  let signedTxn = await algo.myAlgoConnect.signTransaction(txn.toByte());\n  console.log(\"Signed transaction with txID: %s\", txId);\n  await algo.algodClient.sendRawTransaction(signedTxn.blob).do();\n\n  // Wait for transaction to be confirmed\n  const confirmedTxn = await algosdk.waitForConfirmation(\n    algo.algodClient,\n    txId,\n    4\n  );\n\n  // Get the completed Transaction\n  console.log(\n    \"Transaction \" +\n      txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n};\n\n// DELETE DAO:\nexport const deleteDaoAction = async (senderAddress, index) => {\n  console.log(\"Deleting application\");\n\n  let params = await algo.algodClient.getTransactionParams().do();\n\n  // Create ApplicationDeleteTxn\n  let txn = algosdk.makeApplicationDeleteTxnFromObject({\n    from: senderAddress,\n    suggestedParams: params,\n    appIndex: index,\n  });\n\n  // Get transaction ID\n  let txId = txn.txID().toString();\n\n  // Sign & submit the transaction\n  let signedTxn = await algo.myAlgoConnect.signTransaction(txn.toByte());\n  console.log(\"Signed transaction with txID: %s\", txId);\n  await algo.algodClient.sendRawTransaction(signedTxn.blob).do();\n\n  // Wait for transaction to be confirmed\n  const confirmedTxn = await algosdk.waitForConfirmation(\n    algo.algodClient,\n    txId,\n    4\n  );\n\n  // Get the completed Transaction\n  console.log(\n    \"Transaction \" +\n      txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n\n  // Get application id of deleted application and notify about completion\n  let transactionResponse = await algo.algodClient\n    .pendingTransactionInformation(txId)\n    .do();\n  let appId = transactionResponse[\"txn\"][\"txn\"].apid;\n  console.log(\"Deleted app-id: \", appId);\n};\n\n// GET DAO INFO: Using Indexer\nexport const getDaoDataAction = async (senderAddress) => {\n  console.log(\"Getting Dao Data...\");\n\n  let dao;\n  // Step 2: Get dao application by application id\n  let dao_ = await getApplication(algo.daoAppId, senderAddress);\n\n  if (dao_) {\n    dao = dao_;\n  }\n  console.log(\"Dao data Fetched...\");\n  return dao;\n};\n\nconst getApplication = async (appId, senderAddress) => {\n  try {\n    // 1. Get application by appId\n    let response = await algo.indexerClient\n      .lookupApplications(appId)\n      .includeAll(true)\n      .do();\n    if (response.application.deleted) {\n      return null;\n    }\n    let globalState = response.application.params[\"global-state\"];\n\n    // 2. Parse fields of response and return proposal\n    let appAddress = algosdk.getApplicationAddress(appId);\n    let creatorAddress = response.application.params.creator;\n    let quorum = 0;\n    let totalShares = 0;\n    let voteTime = 0;\n    let userId = 0;\n    let userShares = 0;\n\n    const getField = (fieldName, globalState) => {\n      return globalState.find((state) => {\n        return state.key === utf8ToBase64String(fieldName);\n      });\n    };\n\n    if (getField(\"QUORUM\", globalState) !== undefined) {\n      quorum = getField(\"QUORUM\", globalState).value.uint;\n    }\n    if (getField(\"SHARES\", globalState) !== undefined) {\n      totalShares = getField(\"SHARES\", globalState).value.uint;\n    }\n    if (getField(\"TIME\", globalState) !== undefined) {\n      voteTime = getField(\"TIME\", globalState).value.uint;\n    }\n\n    let userInfo = await algo.indexerClient\n      .lookupAccountAppLocalStates(senderAddress)\n      .do();\n\n    let appLocalState = userInfo[\"apps-local-states\"];\n    for (let i = 0; i < appLocalState.length; i++) {\n      if (appId === appLocalState[i][\"id\"]) {\n        let localState = appLocalState[i][\"key-value\"];\n        if (getField(\"USERID\", localState) !== undefined) {\n          userId = getField(\"USERID\", localState).value.uint;\n        }\n        if (getField(\"USHARES\", localState) !== undefined) {\n          userShares = getField(\"USHARES\", localState).value.uint;\n        }\n      }\n    }\n\n    return new DAO(\n      appId,\n      appAddress,\n      creatorAddress,\n      quorum,\n      totalShares,\n      voteTime,\n      userId,\n      userShares\n    );\n  } catch (err) {\n    return null;\n  }\n};\n","import algosdk from \"algosdk\";\nimport * as algo from \"./constants\";\n/* eslint import/no-webpack-loader-syntax: off */\nimport ApprovalProgram from \"!!raw-loader!../contracts/proposal_approval.teal\";\nimport ClearProgram from \"!!raw-loader!../contracts/proposal_clear.teal\";\nimport {\n  getAddress,\n  base64ToUTF8String,\n  utf8ToBase64String,\n} from \"./conversions\";\n\nexport class Proposal {\n  constructor(\n    appId,\n    appAddress,\n    creatorAddress,\n    name,\n    recipient,\n    amount,\n    ends,\n    votes,\n    isLocked,\n    executed,\n    success,\n    ended,\n    userVoteStatus\n  ) {\n    this.appId = appId;\n    this.appAddress = appAddress;\n    this.creatorAddress = creatorAddress;\n    this.name = name;\n    this.recipient = recipient;\n    this.amount = amount;\n    this.ends = ends;\n    this.votes = votes;\n    this.isLocked = isLocked;\n    this.executed = executed;\n    this.success = success;\n    this.ended = ended;\n    this.userVoteStatus = userVoteStatus;\n  }\n}\n\n// Compile smart contract in .teal format to program\nconst compileProgram = async (programSource) => {\n  let encoder = new TextEncoder();\n  let programBytes = encoder.encode(programSource);\n  let compileResponse = await algo.algodClient.compile(programBytes).do();\n  return new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\n};\n\n// CREATE DAO: ApplicationCreateTxn\nexport const createProposalAction = async (\n  senderAddress,\n  proposal,\n  daoData\n) => {\n  console.log(\"Creating Proposal...\");\n  console.log(proposal);\n\n  let params = await algo.algodClient.getTransactionParams().do();\n\n  // Compile Programs\n  const compiledApprovalProgram = await compileProgram(ApprovalProgram);\n  const compiledClearProgram = await compileProgram(ClearProgram);\n  // Build note to identify transaction later and required app args as Uint8Array\n\n  if (!algosdk.isValidAddress(proposal.recipient)) {\n    throw new Error(\"Invalid Address\");\n  }\n  let name = new TextEncoder().encode(proposal.name);\n  let amount = algosdk.encodeUint64(proposal.amount);\n  let note = new TextEncoder().encode(algo.proposalNote);\n  let appArgs = [name, amount];\n  let accounts = [proposal.recipient];\n  let foreignApps = [daoData.appId];\n\n  let txn = algosdk.makeApplicationCreateTxnFromObject({\n    from: senderAddress,\n    suggestedParams: params,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    approvalProgram: compiledApprovalProgram,\n    clearProgram: compiledClearProgram,\n    numLocalInts: algo.numLocalIntsProposal,\n    numLocalByteSlices: algo.numLocalBytesProposal,\n    numGlobalInts: algo.numGlobalIntsProposal,\n    numGlobalByteSlices: algo.numGlobalBytesProposal,\n    note: note,\n    appArgs: appArgs,\n    accounts: accounts,\n    foreignApps: foreignApps,\n  });\n\n  // Get transaction ID\n  let txId = txn.txID().toString();\n\n  // Sign & submit the transaction\n  let signedTxn = await algo.myAlgoConnect.signTransaction(txn.toByte());\n  console.log(\"Signed transaction with txID: %s\", txId);\n  await algo.algodClient.sendRawTransaction(signedTxn.blob).do();\n\n  // Wait for transaction to be confirmed\n  let confirmedTxn = await algosdk.waitForConfirmation(\n    algo.algodClient,\n    txId,\n    4\n  );\n\n  // Get the completed Transaction\n  console.log(\n    \"Transaction \" +\n      txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n\n  // Get created application id and notify about completion\n  let transactionResponse = await algo.algodClient\n    .pendingTransactionInformation(txId)\n    .do();\n\n  let appId = transactionResponse[\"application-index\"];\n  console.log(\"Created new app-id: \", appId);\n  return appId;\n};\n\n// Contribute To Dao\nexport const lockInProposalAction = async (\n  senderAddress,\n  proposal,\n  daoData\n) => {\n  console.log(\"Locking in proposal...\");\n\n  let params = await algo.algodClient.getTransactionParams().do();\n  let lockArg = new TextEncoder().encode(\"lock\");\n  let appArgs = [lockArg];\n  let foreignApps1 = [daoData.appId];\n  // Create ApplicationCallTxn To Proposal Contract\n  let appCallTxn1 = algosdk.makeApplicationCallTxnFromObject({\n    from: senderAddress,\n    appIndex: proposal.appId,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    suggestedParams: params,\n    appArgs: appArgs,\n    foreignApps: foreignApps1,\n  });\n\n  let foreignApps2 = [proposal.appId];\n\n  // Create ApplicationCallTxn To DAO contract\n  let appCallTxn2 = algosdk.makeApplicationCallTxnFromObject({\n    from: senderAddress,\n    appIndex: daoData.appId,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    suggestedParams: params,\n    appArgs: appArgs,\n    foreignApps: foreignApps2,\n  });\n\n  let txnArray = [appCallTxn1, appCallTxn2];\n\n  // Create group transaction out of previously build transactions\n  let groupID = algosdk.computeGroupID(txnArray);\n  for (let i = 0; i < 2; i++) txnArray[i].group = groupID;\n\n  // Sign & submit the group transaction\n  let signedTxn = await algo.myAlgoConnect.signTransaction(\n    txnArray.map((txn) => txn.toByte())\n  );\n\n  console.log(\"Signed group transaction\");\n\n  let tx = await algo.algodClient\n    .sendRawTransaction(signedTxn.map((txn) => txn.blob))\n    .do();\n\n  // Wait for group transaction to be confirmed\n  let confirmedTxn = await algosdk.waitForConfirmation(\n    algo.algodClient,\n    tx.txId,\n    4\n  );\n\n  // Notify about completion\n  console.log(\n    \"Group transaction \" +\n      tx.txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n};\n\n// VOTE: opt_in_call\nexport const voteAction = async (senderAddress, proposal, daoData) => {\n  console.log(\"Sending your votes in......\");\n\n  let params = await algo.algodClient.getTransactionParams().do();\n  let foreignApps = [daoData.appId];\n\n  // Create ApplicationOptIn Transaction\n  let txn = algosdk.makeApplicationOptInTxnFromObject({\n    from: senderAddress,\n    suggestedParams: params,\n    appIndex: proposal.appId,\n    foreignApps: foreignApps,\n  });\n\n  // Get transaction ID\n  let txId = txn.txID().toString();\n\n  // Sign & submit the transaction\n  let signedTxn = await algo.myAlgoConnect.signTransaction(txn.toByte());\n  console.log(\"Signed transaction with txID: %s\", txId);\n  await algo.algodClient.sendRawTransaction(signedTxn.blob).do();\n\n  // Wait for transaction to be confirmed\n  const confirmedTxn = await algosdk.waitForConfirmation(\n    algo.algodClient,\n    txId,\n    4\n  );\n\n  // Get the completed Transaction\n  console.log(\n    \"Transaction \" +\n      txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n  // display results\n  let transactionResponse = await algo.algodClient\n    .pendingTransactionInformation(txId)\n    .do();\n  console.log(\"Opted-in to app-id:\", transactionResponse[\"txn\"][\"txn\"][\"apid\"]);\n};\n\n// EXECUTE PROPOSAL: no_op_call\nexport const executeProposalAction = async (\n  senderAddress,\n  proposal,\n  daoData\n) => {\n  console.log(\"Executing proposal...\");\n\n  let params = await algo.algodClient.getTransactionParams().do();\n  params.fee = algosdk.ALGORAND_MIN_TX_FEE * 3;\n  params.flatFee = true;\n\n  let executeArg = new TextEncoder().encode(\"execute\");\n  let appArgs1 = [executeArg];\n  let foreignApps1 = [daoData.appId];\n\n  // Create ApplicationCallTxn To Proposal Contract\n  let appCallTxn1 = algosdk.makeApplicationCallTxnFromObject({\n    from: senderAddress,\n    appIndex: proposal.appId,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    suggestedParams: params,\n    appArgs: appArgs1,\n    foreignApps: foreignApps1,\n  });\n\n  let fundArg = new TextEncoder().encode(\"fund\");\n  let appArgs2 = [fundArg];\n  let foreignApps2 = [proposal.appId];\n  let accounts = [proposal.recipient];\n\n  // Create ApplicationCallTxn To DAO contract\n  let appCallTxn2 = algosdk.makeApplicationCallTxnFromObject({\n    from: senderAddress,\n    appIndex: daoData.appId,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    suggestedParams: params,\n    appArgs: appArgs2,\n    accounts: accounts,\n    foreignApps: foreignApps2,\n  });\n\n  let endArg = new TextEncoder().encode(\"end\");\n  let appArgs3 = [endArg];\n\n  // Create ApplicationCallTxn To Proposal contract\n  let appCallTxn3 = algosdk.makeApplicationCallTxnFromObject({\n    from: senderAddress,\n    appIndex: proposal.appId,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    suggestedParams: params,\n    appArgs: appArgs3,\n  });\n\n  let txnArray = [appCallTxn1, appCallTxn2, appCallTxn3];\n\n  // Create group transaction out of previously build transactions\n  let groupID = algosdk.computeGroupID(txnArray);\n  for (let i = 0; i < 3; i++) txnArray[i].group = groupID;\n\n  // Sign & submit the group transaction\n  let signedTxn = await algo.myAlgoConnect.signTransaction(\n    txnArray.map((txn) => txn.toByte())\n  );\n\n  console.log(\"Signed group transaction\");\n\n  let tx = await algo.algodClient\n    .sendRawTransaction(signedTxn.map((txn) => txn.blob))\n    .do();\n\n  // Wait for group transaction to be confirmed\n  let confirmedTxn = await algosdk.waitForConfirmation(\n    algo.algodClient,\n    tx.txId,\n    4\n  );\n\n  // Notify about completion\n  console.log(\n    \"Group transaction \" +\n      tx.txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n};\n\n// DELETE DAO:\nexport const deleteProposalAction = async (senderAddress, index) => {\n  console.log(\"Deleting application\");\n\n  let params = await algo.algodClient.getTransactionParams().do();\n\n  // Create ApplicationDeleteTxn\n  let txn = algosdk.makeApplicationDeleteTxnFromObject({\n    from: senderAddress,\n    suggestedParams: params,\n    appIndex: index,\n  });\n\n  // Get transaction ID\n  let txId = txn.txID().toString();\n\n  // Sign & submit the transaction\n  let signedTxn = await algo.myAlgoConnect.signTransaction(txn.toByte());\n  console.log(\"Signed transaction with txID: %s\", txId);\n  await algo.algodClient.sendRawTransaction(signedTxn.blob).do();\n\n  // Wait for transaction to be confirmed\n  const confirmedTxn = await algosdk.waitForConfirmation(\n    algo.algodClient,\n    txId,\n    4\n  );\n\n  // Get the completed Transaction\n  console.log(\n    \"Transaction \" +\n      txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n\n  // Get application id of deleted application and notify about completion\n  let transactionResponse = await algo.algodClient\n    .pendingTransactionInformation(txId)\n    .do();\n  let appId = transactionResponse[\"txn\"][\"txn\"].apid;\n  console.log(\"Deleted app-id: \", appId);\n};\n\n// GET PROPOSAL: Using Indexer\nexport const getProposalsAction = async (senderAddress) => {\n  console.log(\"Fetching Proposals...\");\n  let note = new TextEncoder().encode(algo.proposalNote);\n  let encodedNote = Buffer.from(note).toString(\"base64\");\n\n  // Step 1: Get all transactions by notePrefix (+ minRound filter for performance)\n  let transactionInfo = await algo.indexerClient\n    .searchForTransactions()\n    .notePrefix(encodedNote)\n    .txType(\"appl\")\n    .minRound(algo.minRound)\n    .do();\n\n  let proposals = [];\n  for (const transaction of transactionInfo.transactions) {\n    let appId = transaction[\"created-application-index\"];\n    if (appId) {\n      // Step 2: Get each application by application id\n      let proposal = await getApplication(appId, senderAddress);\n      if (proposal) {\n        proposals.push(proposal);\n      }\n    }\n  }\n  console.log(\"Proposals Fetched...\");\n  return proposals;\n};\n\nconst getApplication = async (appId, senderAddress) => {\n  try {\n    // 1. Get application by appId\n    let response = await algo.indexerClient\n      .lookupApplications(appId)\n      .includeAll(true)\n      .do();\n    if (response.application.deleted) {\n      return null;\n    }\n    let globalState = response.application.params[\"global-state\"];\n\n    // 2. Parse fields of response and return proposal\n    let appAddress = algosdk.getApplicationAddress(appId);\n    let creatorAddress = response.application.params.creator;\n    let name = \"\";\n    let recipient = \"\";\n    let amount = 0;\n    let ends = 0;\n    let votes = 0;\n    let isLocked = 0;\n    let executed = 0;\n    let success = 0;\n    let ended = 0;\n    let userVoteStatus = 0;\n\n    const getField = (fieldName, globalState) => {\n      return globalState.find((state) => {\n        return state.key === utf8ToBase64String(fieldName);\n      });\n    };\n\n    if (getField(\"NAME\", globalState) !== undefined) {\n      let field = getField(\"NAME\", globalState).value.bytes;\n      name = base64ToUTF8String(field);\n    }\n\n    if (getField(\"RECIPIENT\", globalState) !== undefined) {\n      let field = getField(\"RECIPIENT\", globalState).value.bytes;\n      recipient = getAddress(field);\n    }\n\n    if (getField(\"AMOUNT\", globalState) !== undefined) {\n      amount = getField(\"AMOUNT\", globalState).value.uint;\n    }\n\n    if (getField(\"ENDS\", globalState) !== undefined) {\n      ends = getField(\"ENDS\", globalState).value.uint;\n    }\n\n    if (getField(\"VOTES\", globalState) !== undefined) {\n      votes = getField(\"VOTES\", globalState).value.uint;\n    }\n\n    if (getField(\"ISLOCKED\", globalState) !== undefined) {\n      isLocked = getField(\"ISLOCKED\", globalState).value.uint;\n    }\n\n    if (getField(\"EXECUTED\", globalState) !== undefined) {\n      executed = getField(\"EXECUTED\", globalState).value.uint;\n    }\n\n    if (getField(\"SUCCESS\", globalState) !== undefined) {\n      success = getField(\"SUCCESS\", globalState).value.uint;\n    }\n    if (getField(\"ENDED\", globalState) !== undefined) {\n      ended = getField(\"ENDED\", globalState).value.uint;\n    }\n\n    let userInfo = await algo.indexerClient\n      .lookupAccountAppLocalStates(senderAddress)\n      .do();\n\n    let appLocalState = userInfo[\"apps-local-states\"];\n    for (let i = 0; i < appLocalState.length; i++) {\n      if (appId === appLocalState[i][\"id\"]) {\n        let localState = appLocalState[i][\"key-value\"];\n        if (getField(\"VOTESTATUS\", localState) !== undefined) {\n          userVoteStatus = getField(\"VOTESTATUS\", localState).value.uint;\n        }\n      }\n    }\n\n    return new Proposal(\n      appId,\n      appAddress,\n      creatorAddress,\n      name,\n      recipient,\n      amount,\n      ends,\n      votes,\n      isLocked,\n      executed,\n      success,\n      ended,\n      userVoteStatus\n    );\n  } catch (err) {\n    return null;\n  }\n};\n"],"sourceRoot":""}